{"version":3,"sources":["People.js","AddPeople.js","App.js","serviceWorker.js","index.js"],"names":["People","peopleList","people","map","className","key","id","name","AddPeople","state","handleChange","e","setState","target","value","count","handleSubmit","preventDefault","reset","props","addHuman","onSubmit","this","htmlFor","pattern","required","type","minLength","onChange","Component","App","human","Math","random","console","log","find","p","title","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4NAiBeA,EAfA,SAAC,GAAc,IACpBC,EADmB,EAAZC,OACaC,KAAI,SAAAD,GAC1B,OACI,yBAAKE,UAAU,QAAQC,IAAKH,EAAOI,IAC/BJ,EAAOK,SAInB,OACI,yBAAKH,UAAU,eACVH,I,OCoCEO,E,4MA7CXC,MAAQ,CACJF,KAAM,M,EAEVG,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOP,GAAKK,EAAEE,OAAOC,S,EAGhCL,MAAQ,CACJM,MAAO,G,EAGXC,aAAe,SAACL,GACZA,EAAEM,iBAEFN,EAAEE,OAAOK,QACT,EAAKN,UAAS,kBAAgB,CAC1BG,MADU,EAAGA,MACE,MAElB,EAAKI,MAAMC,SAAS,EAAKX,Q,uDAI1B,OACA,yBAAKL,UAAU,mBACP,yBAAKA,UAAU,aACX,0BAAMiB,SAAUC,KAAKN,cACrB,2BAAOO,QAAQ,QAAf,4BACA,2BACIC,QAAQ,gBACRC,UAAQ,EACRC,KAAK,OACLC,UAAU,IACVrB,GAAG,OACHsB,SAAUN,KAAKZ,eAEnB,4CAGR,uBAAGN,UAAU,WAAb,kBAAwCkB,KAAKb,MAAMM,Y,GAxCvCc,aC8DTC,E,4MA3DbrB,MAAQ,CACNP,OAAQ,CAAC,CAAEK,KAAM,KAAMQ,MAAO,KAAMT,GAAI,Q,EAG1Cc,SAAW,SAACW,GACVA,EAAMzB,GAAK0B,KAAKC,SAEhBC,QAAQC,IAAIJ,EAAMhB,OAEH,EAAKN,MAAMP,OAAOkC,MAAK,SAAAC,GAAC,OAAIA,EAAE9B,OAASwB,EAAMxB,UAE1DwB,EAAMhB,MAAQgB,EAAMhB,MAAQ,EAC5BmB,QAAQC,IAAI,cAEd,IAAIjC,EAAM,sBAAO,EAAKO,MAAMP,QAAlB,CAA0B6B,IAEpC,EAAKnB,SAAS,CACZV,OAAQA,K,uDAMV,OACE,yBAAKE,UAAU,OACb,yBAAKA,UAAU,aACb,+BACE,4HAIA,uBACEkC,MAAM,uBACNC,KAAK,0EAFP,gDAOF,gCACE,2DAC8B,qDAGhC,kBAAC,EAAD,CAAWnB,SAAUE,KAAKF,WAC1B,kBAAC,EAAD,CAAQlB,OAAQoB,KAAKb,MAAMP,UAG7B,gCACE,kFAEE,uBAAGqC,KAAK,+BAAR,qBAFF,gC,GAjDQV,aCQEW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.190cc549.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst People = ({people}) => {\r\n    const peopleList = people.map(people => {\r\n        return (\r\n            <div className=\"human\" key={people.id}>\r\n               {people.name}\r\n            </div>\r\n        )\r\n    })\r\n    return (\r\n        <div className=\"people-list\">\r\n            {peopleList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default People","import React, { Component } from 'react'\r\n\r\nclass AddPeople extends Component {\r\n    state = {\r\n        name: null,\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n    state = {\r\n        count: 0\r\n    };\r\n    \r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        e.target.reset();\r\n        this.setState(({ count }) => ({\r\n            count: count + 1\r\n        }));\r\n         this.props.addHuman(this.state);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div className=\"type-area-outer\">\r\n                <div className=\"type-area\">\r\n                    <form onSubmit={this.handleSubmit}>\r\n                    <label htmlFor=\"name\">Insert name and surname:</label>\r\n                    <input\r\n                        pattern=\"^[a-zA-Z\\s]+\"\r\n                        required\r\n                        type=\"text\"\r\n                        minLength=\"5\"\r\n                        id=\"name\"\r\n                        onChange={this.handleChange}\r\n                    ></input>\r\n                    <button>Submit</button>\r\n                    </form>\r\n                </div>\r\n            <p className=\"counter\">Names counter: { this.state.count }</p>\r\n          </div>\r\n            );\r\n    }\r\n}\r\n\r\nexport default AddPeople;","import React, { Component } from 'react';\nimport People from './People.js';\nimport AddPeople from  './AddPeople.js';\n\nclass App extends Component {\n  state = {\n    people: [{ name: null, count: null, id: null }],\n  };\n\n  addHuman = (human) => {\n    human.id = Math.random();\n\n    console.log(human.count);\n\n    const exists = this.state.people.find(p => p.name === human.name);\n    if (exists) {\n      human.count = human.count - 1;\n      console.log('Duplicate');\n    }\n    let people = [...this.state.people, human];\n\n    this.setState({\n      people: people,\n    });\n  };\n\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-inner\">\n          <aside>\n            <p>\n              According to Mona Chalabi's research -&nbsp;an&nbsp;average person\n              can remember up to 150 people.\n          </p>\n            <a\n              title=\"FiveThirtyEight site\"\n              href=\"https://fivethirtyeight.com/features/how-many-people-can-you-remember/\"\n            >\n              How many people can you remember? - article\n          </a>\n          </aside>\n          <header>\n            <h1>\n              How many names and surnames <span>can YOU remember?</span>\n            </h1>\n          </header>\n          <AddPeople addHuman={this.addHuman} />\n          <People people={this.state.people} />\n          {/* <div>Countdown: {counter}</div> */}\n        </div>\n        <footer>\n          <p>\n            We do NOT store any of the written data. Made by&nbsp;\n            <a href=\"https://fifcio13.github.io/\">Filip&nbsp;Krawczyk</a> Â© 2020\n            using React\n          </p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}